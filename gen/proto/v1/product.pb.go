// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/v1/product.proto

package pbv1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/type/datetime"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProductStatus int32

const (
	ProductUnverified ProductStatus = 0
	ProductActive     ProductStatus = 1
	ProductArchived   ProductStatus = 2
)

var ProductStatus_name = map[int32]string{
	0: "ProductUnverified",
	1: "ProductActive",
	2: "ProductArchived",
}

var ProductStatus_value = map[string]int32{
	"ProductUnverified": 0,
	"ProductActive":     1,
	"ProductArchived":   2,
}

func (ProductStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_da212f8096f3452f, []int{0}
}

type ProductProperty struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ProductProperty) Reset()      { *m = ProductProperty{} }
func (*ProductProperty) ProtoMessage() {}
func (*ProductProperty) Descriptor() ([]byte, []int) {
	return fileDescriptor_da212f8096f3452f, []int{0}
}
func (m *ProductProperty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductProperty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductProperty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProductProperty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductProperty.Merge(m, src)
}
func (m *ProductProperty) XXX_Size() int {
	return m.Size()
}
func (m *ProductProperty) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductProperty.DiscardUnknown(m)
}

var xxx_messageInfo_ProductProperty proto.InternalMessageInfo

func (m *ProductProperty) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProductProperty) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Product struct {
	Uuid         string             `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Status       ProductStatus      `protobuf:"varint,2,opt,name=status,proto3,enum=pb.v1.ProductStatus" json:"status,omitempty"`
	Name         string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description  string             `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Price        float64            `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	Availability bool               `protobuf:"varint,6,opt,name=availability,proto3" json:"availability,omitempty"`
	Properties   []*ProductProperty `protobuf:"bytes,7,rep,name=properties,proto3" json:"properties,omitempty"`
	CreatedAt    *time.Time         `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
}

func (m *Product) Reset()      { *m = Product{} }
func (*Product) ProtoMessage() {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_da212f8096f3452f, []int{1}
}
func (m *Product) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Product.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(m, src)
}
func (m *Product) XXX_Size() int {
	return m.Size()
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

func (m *Product) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Product) GetStatus() ProductStatus {
	if m != nil {
		return m.Status
	}
	return ProductUnverified
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Product) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Product) GetAvailability() bool {
	if m != nil {
		return m.Availability
	}
	return false
}

func (m *Product) GetProperties() []*ProductProperty {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Product) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.v1.ProductStatus", ProductStatus_name, ProductStatus_value)
	golang_proto.RegisterEnum("pb.v1.ProductStatus", ProductStatus_name, ProductStatus_value)
	proto.RegisterType((*ProductProperty)(nil), "pb.v1.ProductProperty")
	golang_proto.RegisterType((*ProductProperty)(nil), "pb.v1.ProductProperty")
	proto.RegisterType((*Product)(nil), "pb.v1.Product")
	golang_proto.RegisterType((*Product)(nil), "pb.v1.Product")
}

func init() { proto.RegisterFile("proto/v1/product.proto", fileDescriptor_da212f8096f3452f) }
func init() { golang_proto.RegisterFile("proto/v1/product.proto", fileDescriptor_da212f8096f3452f) }

var fileDescriptor_da212f8096f3452f = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0xf7, 0xa5, 0x49, 0xda, 0x5e, 0xf8, 0x93, 0x1e, 0x69, 0x65, 0x65, 0x38, 0xac, 0x4c, 0x16,
	0xa2, 0xb6, 0x12, 0x24, 0x06, 0x98, 0x52, 0x31, 0xa3, 0xca, 0xc0, 0xc2, 0x82, 0xce, 0xf6, 0xc3,
	0x3d, 0xc9, 0xf1, 0x9d, 0xce, 0x67, 0x4b, 0xde, 0xf8, 0x08, 0x1d, 0xf9, 0x08, 0x6c, 0x7c, 0x05,
	0x46, 0xc6, 0x8c, 0xdd, 0x20, 0xf6, 0xc2, 0xd8, 0x91, 0xb1, 0xf2, 0x9f, 0x44, 0xc9, 0xf6, 0xde,
	0xef, 0x8f, 0xdf, 0x7b, 0x3f, 0x1f, 0xbe, 0x90, 0x4a, 0x68, 0xe1, 0xe6, 0x73, 0x57, 0x2a, 0x11,
	0x66, 0x81, 0x76, 0x1a, 0x80, 0x0c, 0xa4, 0xef, 0xe4, 0xf3, 0xe9, 0x24, 0x12, 0x91, 0x68, 0x25,
	0x75, 0xd5, 0x92, 0xd3, 0x69, 0x24, 0x44, 0x14, 0x83, 0xab, 0x0b, 0x09, 0x6e, 0xc8, 0x34, 0x68,
	0xbe, 0x82, 0x96, 0x9b, 0xbd, 0xc5, 0x4f, 0xaf, 0xdb, 0x2f, 0x5d, 0x2b, 0x21, 0x41, 0xe9, 0x82,
	0x10, 0xdc, 0x4f, 0xd8, 0x0a, 0x4c, 0x64, 0x21, 0xfb, 0xd4, 0x6b, 0x6a, 0x32, 0xc1, 0x83, 0x9c,
	0xc5, 0x19, 0x98, 0xbd, 0x06, 0x6c, 0x9b, 0xd9, 0xcf, 0x1e, 0x3e, 0xee, 0xdc, 0xb5, 0x2b, 0xcb,
	0x78, 0xb8, 0x75, 0xd5, 0x35, 0x79, 0x89, 0x87, 0xa9, 0x66, 0x3a, 0x4b, 0x1b, 0xdb, 0x93, 0xc5,
	0xc4, 0x69, 0xd6, 0x74, 0x3a, 0xcf, 0x87, 0x86, 0xf3, 0x3a, 0xcd, 0x6e, 0xee, 0xd1, 0xde, 0x5c,
	0x0b, 0x8f, 0x42, 0x48, 0x03, 0xc5, 0xa5, 0xe6, 0x22, 0x31, 0xfb, 0x0d, 0xb5, 0x0f, 0xd5, 0x9b,
	0x49, 0xc5, 0x03, 0x30, 0x07, 0x16, 0xb2, 0x91, 0xd7, 0x36, 0x64, 0x86, 0x1f, 0xb1, 0x9c, 0xf1,
	0x98, 0xf9, 0x3c, 0xe6, 0xba, 0x30, 0x87, 0x16, 0xb2, 0x4f, 0xbc, 0x03, 0x8c, 0xbc, 0xc6, 0x58,
	0xb6, 0x37, 0x73, 0x48, 0xcd, 0x63, 0xeb, 0xc8, 0x1e, 0x2d, 0x2e, 0x0e, 0x37, 0xdc, 0x66, 0xe2,
	0xed, 0x29, 0xc9, 0x1b, 0x8c, 0x03, 0x05, 0x4c, 0x43, 0xf8, 0x85, 0x69, 0xf3, 0xc4, 0x42, 0xf6,
	0x68, 0x71, 0xee, 0xb4, 0x19, 0x3b, 0x75, 0xc6, 0xce, 0x3b, 0xa6, 0xe1, 0x23, 0x5f, 0xc1, 0x55,
	0xff, 0xf6, 0xcf, 0x73, 0xe4, 0x9d, 0x76, 0xf2, 0xa5, 0x7e, 0xf1, 0x1e, 0x3f, 0x3e, 0x38, 0x9e,
	0x9c, 0xe3, 0xb3, 0x0e, 0xf8, 0x94, 0xe4, 0xa0, 0xf8, 0x57, 0x0e, 0xe1, 0xd8, 0x20, 0x67, 0x3b,
	0xdd, 0x32, 0xd0, 0x3c, 0x87, 0x31, 0x22, 0xcf, 0x76, 0x7f, 0x6a, 0xa9, 0x82, 0x1b, 0x9e, 0x43,
	0x38, 0xee, 0x5d, 0x89, 0xf5, 0x86, 0x1a, 0x77, 0x1b, 0x6a, 0xdc, 0x6f, 0x28, 0xfa, 0x56, 0x52,
	0xf4, 0xa3, 0xa4, 0xe8, 0x77, 0x49, 0xd1, 0xba, 0xa4, 0xe8, 0x6f, 0x49, 0xd1, 0xbf, 0x92, 0x1a,
	0xf7, 0x25, 0x45, 0xff, 0x4b, 0x8a, 0x6e, 0x2b, 0x6a, 0x7c, 0xaf, 0x28, 0xfa, 0x55, 0x51, 0xb4,
	0xae, 0xa8, 0x71, 0x57, 0x51, 0xe3, 0xf3, 0x65, 0xc4, 0xf5, 0x4d, 0xe6, 0x3b, 0x81, 0x58, 0xb9,
	0x7e, 0x21, 0x94, 0x2e, 0x5c, 0x48, 0x34, 0x28, 0xa9, 0x78, 0x0a, 0x97, 0x4c, 0xca, 0x98, 0x07,
	0xac, 0x4e, 0xda, 0x95, 0x7e, 0x3e, 0xf7, 0x87, 0xcd, 0xb3, 0x79, 0xf5, 0x10, 0x00, 0x00, 0xff,
	0xff, 0x51, 0x34, 0x91, 0x32, 0x89, 0x02, 0x00, 0x00,
}

func (x ProductStatus) String() string {
	s, ok := ProductStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ProductProperty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProductProperty)
	if !ok {
		that2, ok := that.(ProductProperty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Product) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Product)
	if !ok {
		that2, ok := that.(Product)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Availability != that1.Availability {
		return false
	}
	if len(this.Properties) != len(that1.Properties) {
		return false
	}
	for i := range this.Properties {
		if !this.Properties[i].Equal(that1.Properties[i]) {
			return false
		}
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	return true
}
func (this *ProductProperty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pbv1.ProductProperty{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Product) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pbv1.Product{")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "Availability: "+fmt.Sprintf("%#v", this.Availability)+",\n")
	if this.Properties != nil {
		s = append(s, "Properties: "+fmt.Sprintf("%#v", this.Properties)+",\n")
	}
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProduct(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ProductProperty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductProperty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProductProperty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Product) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Product) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Product) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintProduct(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Properties) > 0 {
		for iNdEx := len(m.Properties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Properties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProduct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Availability {
		i--
		if m.Availability {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x29
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProduct(dAtA []byte, offset int, v uint64) int {
	offset -= sovProduct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProductProperty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	return n
}

func (m *Product) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovProduct(uint64(m.Status))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.Price != 0 {
		n += 9
	}
	if m.Availability {
		n += 2
	}
	if len(m.Properties) > 0 {
		for _, e := range m.Properties {
			l = e.Size()
			n += 1 + l + sovProduct(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovProduct(uint64(l))
	}
	return n
}

func sovProduct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProduct(x uint64) (n int) {
	return sovProduct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProductProperty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProductProperty{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Product) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProperties := "[]*ProductProperty{"
	for _, f := range this.Properties {
		repeatedStringForProperties += strings.Replace(f.String(), "ProductProperty", "ProductProperty", 1) + ","
	}
	repeatedStringForProperties += "}"
	s := strings.Join([]string{`&Product{`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`Availability:` + fmt.Sprintf("%v", this.Availability) + `,`,
		`Properties:` + repeatedStringForProperties + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "DateTime", "datetime.DateTime", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProduct(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProductProperty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductProperty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductProperty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Product) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Product: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Product: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProductStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Availability", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Availability = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, &ProductProperty{})
			if err := m.Properties[len(m.Properties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProduct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProduct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProduct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProduct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProduct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProduct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProduct = fmt.Errorf("proto: unexpected end of group")
)
