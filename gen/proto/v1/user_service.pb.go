// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/v1/user_service.proto

package pbv1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuthorizeUserRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *AuthorizeUserRequest) Reset()      { *m = AuthorizeUserRequest{} }
func (*AuthorizeUserRequest) ProtoMessage() {}
func (*AuthorizeUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ddca20ee1d0daf, []int{0}
}
func (m *AuthorizeUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeUserRequest.Merge(m, src)
}
func (m *AuthorizeUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeUserRequest proto.InternalMessageInfo

func (m *AuthorizeUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AuthorizeUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthorizeUserResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *AuthorizeUserResponse) Reset()      { *m = AuthorizeUserResponse{} }
func (*AuthorizeUserResponse) ProtoMessage() {}
func (*AuthorizeUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ddca20ee1d0daf, []int{1}
}
func (m *AuthorizeUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeUserResponse.Merge(m, src)
}
func (m *AuthorizeUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeUserResponse proto.InternalMessageInfo

func (m *AuthorizeUserResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type GetByUUIDRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetByUUIDRequest) Reset()      { *m = GetByUUIDRequest{} }
func (*GetByUUIDRequest) ProtoMessage() {}
func (*GetByUUIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ddca20ee1d0daf, []int{2}
}
func (m *GetByUUIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetByUUIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetByUUIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetByUUIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByUUIDRequest.Merge(m, src)
}
func (m *GetByUUIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetByUUIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByUUIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetByUUIDRequest proto.InternalMessageInfo

func (m *GetByUUIDRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func init() {
	proto.RegisterType((*AuthorizeUserRequest)(nil), "pb.v1.AuthorizeUserRequest")
	proto.RegisterType((*AuthorizeUserResponse)(nil), "pb.v1.AuthorizeUserResponse")
	proto.RegisterType((*GetByUUIDRequest)(nil), "pb.v1.GetByUUIDRequest")
}

func init() { proto.RegisterFile("proto/v1/user_service.proto", fileDescriptor_70ddca20ee1d0daf) }

var fileDescriptor_70ddca20ee1d0daf = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x31, 0x6b, 0x14, 0x41,
	0x14, 0xde, 0x39, 0x8c, 0x98, 0x09, 0x4a, 0x98, 0x24, 0x18, 0x36, 0x61, 0x08, 0x5b, 0x88, 0x04,
	0x76, 0x87, 0x8b, 0x5d, 0xba, 0x04, 0x41, 0x2d, 0x44, 0x88, 0x5c, 0x63, 0x23, 0xbb, 0x9b, 0xe1,
	0x6e, 0xf0, 0xb2, 0x33, 0xce, 0xcc, 0xae, 0x9c, 0x22, 0x84, 0x2b, 0xac, 0x84, 0x04, 0xad, 0xfc,
	0x07, 0x56, 0x12, 0x02, 0x92, 0x40, 0xe0, 0x6c, 0x2d, 0xdf, 0x62, 0x93, 0xd2, 0xdb, 0xb3, 0xb0,
	0xcc, 0x4f, 0x90, 0xdb, 0xbd, 0x8b, 0xe4, 0xb8, 0x2a, 0xd5, 0xcc, 0x7b, 0xef, 0xe3, 0xfb, 0xbe,
	0xf7, 0xf1, 0xf0, 0x8a, 0xd2, 0xd2, 0x4a, 0x96, 0xd5, 0x59, 0x6a, 0xb8, 0x7e, 0x69, 0xb8, 0xce,
	0x44, 0xcc, 0x83, 0xb2, 0x4b, 0x66, 0x54, 0x14, 0x64, 0x75, 0x77, 0xb5, 0x29, 0x65, 0xb3, 0xcd,
	0x59, 0xa8, 0x04, 0x0b, 0x93, 0x44, 0xda, 0xd0, 0x0a, 0x99, 0x98, 0x0a, 0xe4, 0x56, 0x4f, 0xec,
	0x37, 0x79, 0xe2, 0x4b, 0xc5, 0x93, 0x50, 0x89, 0x6c, 0x83, 0x49, 0x55, 0x62, 0xa6, 0xe0, 0x17,
	0xae, 0x28, 0x56, 0x4d, 0xef, 0x31, 0x5e, 0xdc, 0x4a, 0x6d, 0x4b, 0x6a, 0xf1, 0x96, 0x37, 0x0c,
	0xd7, 0x3b, 0xfc, 0x75, 0xca, 0x8d, 0x25, 0x8b, 0x78, 0x86, 0xef, 0x85, 0xa2, 0xbd, 0x8c, 0xd6,
	0xd0, 0xfd, 0xd9, 0x9d, 0xaa, 0x20, 0x2e, 0xbe, 0xa5, 0x42, 0x63, 0xde, 0x48, 0xbd, 0xbb, 0x5c,
	0x2b, 0x07, 0x97, 0xb5, 0xe7, 0xe3, 0xa5, 0x09, 0x26, 0xa3, 0x64, 0x62, 0xf8, 0x90, 0xca, 0xca,
	0x57, 0x3c, 0x19, 0x53, 0x95, 0x85, 0x77, 0x0f, 0xcf, 0x3f, 0xe2, 0x76, 0xbb, 0xd3, 0x68, 0x3c,
	0x79, 0x38, 0x16, 0x25, 0xf8, 0x46, 0x9a, 0x8a, 0xdd, 0x11, 0xb0, 0xfc, 0x6f, 0x7c, 0xab, 0xe1,
	0xb9, 0x21, 0xdd, 0xf3, 0x2a, 0x20, 0xf2, 0x05, 0xe1, 0xdb, 0x57, 0x74, 0xc8, 0x4a, 0x50, 0xa6,
	0x15, 0x4c, 0xdb, 0xc3, 0x5d, 0x9d, 0x3e, 0xac, 0xac, 0x79, 0x4f, 0x3f, 0x6d, 0xd5, 0x09, 0x83,
	0x43, 0x38, 0xce, 0xbb, 0xd0, 0xcb, 0xf7, 0xe1, 0x14, 0x4e, 0xe0, 0x28, 0xff, 0x00, 0xa7, 0xf9,
	0xc1, 0x1a, 0xfc, 0x80, 0x1e, 0x9c, 0xe5, 0x1f, 0xe1, 0x04, 0x7a, 0x70, 0x0c, 0x47, 0x79, 0x17,
	0xbe, 0xc3, 0x59, 0x7e, 0xd0, 0xfd, 0xf5, 0xe7, 0x73, 0x6d, 0xc1, 0xbb, 0x33, 0x4e, 0xd2, 0xb0,
	0x30, 0xb5, 0xad, 0x4d, 0xb4, 0x4e, 0xba, 0x08, 0xcf, 0x5e, 0x2e, 0x45, 0xee, 0x8e, 0xa4, 0x27,
	0xd7, 0x74, 0xe7, 0x46, 0x83, 0xa1, 0x15, 0xef, 0xd9, 0xb5, 0x2d, 0x2c, 0x79, 0xf3, 0xff, 0x2d,
	0xbc, 0x1b, 0x86, 0xf5, 0x7e, 0x13, 0xad, 0x6f, 0xc7, 0xd0, 0xa7, 0xce, 0x79, 0x9f, 0x3a, 0x17,
	0x7d, 0x8a, 0xf6, 0x0b, 0x8a, 0xbe, 0x16, 0x14, 0xfd, 0x2c, 0x28, 0x82, 0x82, 0xa2, 0xdf, 0x05,
	0x45, 0x7f, 0x0b, 0xea, 0x5c, 0x14, 0x14, 0x1d, 0x0e, 0xa8, 0x03, 0x03, 0xea, 0x9c, 0x0f, 0xa8,
	0xf3, 0xc2, 0x6f, 0x0a, 0xdb, 0x4a, 0xa3, 0x20, 0x96, 0x7b, 0x2c, 0xea, 0x48, 0x6d, 0x3b, 0x8c,
	0x27, 0x96, 0x6b, 0xa5, 0x85, 0xe1, 0x7e, 0xa8, 0x54, 0x5b, 0xc4, 0xe5, 0x35, 0x31, 0x15, 0x65,
	0xf5, 0xe8, 0x66, 0x79, 0x3d, 0x0f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x10, 0xf0, 0x49, 0xbf,
	0xc6, 0x02, 0x00, 0x00,
}

func (this *AuthorizeUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizeUserRequest)
	if !ok {
		that2, ok := that.(AuthorizeUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *AuthorizeUserResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizeUserResponse)
	if !ok {
		that2, ok := that.(AuthorizeUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *GetByUUIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetByUUIDRequest)
	if !ok {
		that2, ok := that.(GetByUUIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	return true
}
func (this *AuthorizeUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pbv1.AuthorizeUserRequest{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizeUserResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pbv1.AuthorizeUserResponse{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetByUUIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pbv1.GetByUUIDRequest{")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUserService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AuthorizeUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintUserService(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintUserService(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthorizeUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintUserService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetByUUIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetByUUIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetByUUIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintUserService(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUserService(dAtA []byte, offset int, v uint64) int {
	offset -= sovUserService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuthorizeUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUserService(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovUserService(uint64(l))
	}
	return n
}

func (m *AuthorizeUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUserService(uint64(l))
	}
	return n
}

func (m *GetByUUIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovUserService(uint64(l))
	}
	return n
}

func sovUserService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUserService(x uint64) (n int) {
	return sovUserService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AuthorizeUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeUserRequest{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeUserResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeUserResponse{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetByUUIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetByUUIDRequest{`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUserService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AuthorizeUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetByUUIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetByUUIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetByUUIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUserService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUserService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUserService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUserService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUserService = fmt.Errorf("proto: unexpected end of group")
)
