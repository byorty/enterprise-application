// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/v1/product_service.proto

package pbv1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProductListRequest struct {
	Filter    *ProductListRequestFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Paginator *Paginator                `protobuf:"bytes,2,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ProductListRequest) Reset()      { *m = ProductListRequest{} }
func (*ProductListRequest) ProtoMessage() {}
func (*ProductListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ea6572e0ca3825b, []int{0}
}
func (m *ProductListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProductListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductListRequest.Merge(m, src)
}
func (m *ProductListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProductListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProductListRequest proto.InternalMessageInfo

func (m *ProductListRequest) GetFilter() *ProductListRequestFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ProductListRequest) GetPaginator() *Paginator {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type ProductListRequestFilter struct {
	NameContains string             `protobuf:"bytes,1,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	PriceGt      float64            `protobuf:"fixed64,2,opt,name=price_gt,json=priceGt,proto3" json:"price_gt,omitempty"`
	PriceLt      float64            `protobuf:"fixed64,3,opt,name=price_lt,json=priceLt,proto3" json:"price_lt,omitempty"`
	PropertiesEq []*ProductProperty `protobuf:"bytes,7,rep,name=properties_eq,json=propertiesEq,proto3" json:"properties_eq,omitempty"`
}

func (m *ProductListRequestFilter) Reset()      { *m = ProductListRequestFilter{} }
func (*ProductListRequestFilter) ProtoMessage() {}
func (*ProductListRequestFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ea6572e0ca3825b, []int{1}
}
func (m *ProductListRequestFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductListRequestFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductListRequestFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProductListRequestFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductListRequestFilter.Merge(m, src)
}
func (m *ProductListRequestFilter) XXX_Size() int {
	return m.Size()
}
func (m *ProductListRequestFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductListRequestFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ProductListRequestFilter proto.InternalMessageInfo

func (m *ProductListRequestFilter) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *ProductListRequestFilter) GetPriceGt() float64 {
	if m != nil {
		return m.PriceGt
	}
	return 0
}

func (m *ProductListRequestFilter) GetPriceLt() float64 {
	if m != nil {
		return m.PriceLt
	}
	return 0
}

func (m *ProductListRequestFilter) GetPropertiesEq() []*ProductProperty {
	if m != nil {
		return m.PropertiesEq
	}
	return nil
}

type ProductListResponse struct {
	Items []*Product `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Count int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *ProductListResponse) Reset()      { *m = ProductListResponse{} }
func (*ProductListResponse) ProtoMessage() {}
func (*ProductListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ea6572e0ca3825b, []int{2}
}
func (m *ProductListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProductListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductListResponse.Merge(m, src)
}
func (m *ProductListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProductListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProductListResponse proto.InternalMessageInfo

func (m *ProductListResponse) GetItems() []*Product {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ProductListResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*ProductListRequest)(nil), "pb.v1.ProductListRequest")
	proto.RegisterType((*ProductListRequestFilter)(nil), "pb.v1.ProductListRequestFilter")
	proto.RegisterType((*ProductListResponse)(nil), "pb.v1.ProductListResponse")
}

func init() { proto.RegisterFile("proto/v1/product_service.proto", fileDescriptor_2ea6572e0ca3825b) }

var fileDescriptor_2ea6572e0ca3825b = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcf, 0x6b, 0x13, 0x41,
	0x1c, 0xc5, 0x77, 0x5a, 0xd2, 0xda, 0xe9, 0x0f, 0x64, 0x6a, 0x6b, 0x1a, 0x64, 0x0c, 0xd1, 0x43,
	0x2f, 0xd9, 0xa5, 0xf1, 0x20, 0xd2, 0x53, 0xeb, 0x8f, 0x22, 0x54, 0xa8, 0x2b, 0xbd, 0x78, 0x09,
	0x9b, 0xed, 0xb8, 0x0e, 0x24, 0x33, 0xd3, 0xdd, 0xd9, 0x40, 0x90, 0x42, 0x49, 0x04, 0x2f, 0x1e,
	0xa4, 0x7a, 0xf7, 0xea, 0x45, 0x90, 0x62, 0xa1, 0x58, 0x4c, 0xaf, 0x1e, 0x67, 0xf1, 0xd2, 0xa3,
	0xd9, 0x78, 0xf0, 0xd8, 0x3f, 0x41, 0x32, 0x9b, 0x34, 0x49, 0x6d, 0xf1, 0xb4, 0xcc, 0x7b, 0x6f,
	0xbe, 0xef, 0x33, 0xcb, 0x0c, 0xc4, 0xc2, 0xe7, 0x92, 0x5b, 0xd5, 0x25, 0x4b, 0xf8, 0x7c, 0x2b,
	0x74, 0x65, 0x31, 0x20, 0x7e, 0x95, 0xba, 0xc4, 0xd4, 0x06, 0x4a, 0x89, 0x92, 0x59, 0x5d, 0xca,
	0xdc, 0xf0, 0x38, 0xf7, 0xca, 0xc4, 0x72, 0x04, 0xb5, 0x1c, 0xc6, 0xb8, 0x74, 0x24, 0xe5, 0x2c,
	0x48, 0x42, 0x99, 0xe4, 0xe3, 0xe6, 0x3d, 0xc2, 0xf2, 0x5c, 0x10, 0xe6, 0x08, 0x5a, 0x2d, 0x58,
	0x5c, 0xe8, 0xcc, 0x05, 0xf9, 0xb9, 0xb3, 0x52, 0x97, 0x57, 0x2a, 0x9c, 0x75, 0xe5, 0xf9, 0xf3,
	0x2c, 0x89, 0x9e, 0xdb, 0x81, 0x68, 0x23, 0x11, 0xd6, 0x69, 0x20, 0x6d, 0xb2, 0x1d, 0x92, 0x40,
	0xa2, 0xbb, 0x70, 0xec, 0x05, 0x2d, 0x4b, 0xe2, 0xa7, 0x41, 0x16, 0x2c, 0x4e, 0x16, 0x6e, 0x9a,
	0x1a, 0xd5, 0xfc, 0x37, 0xfa, 0x48, 0xc7, 0xec, 0x6e, 0x1c, 0x99, 0x70, 0x42, 0x38, 0x1e, 0x65,
	0x8e, 0xe4, 0x7e, 0x7a, 0x44, 0xef, 0xbd, 0xda, 0xdb, 0xdb, 0xd3, 0xed, 0x7e, 0x24, 0xb7, 0x0f,
	0x60, 0xfa, 0xb2, 0xa1, 0xe8, 0x16, 0x9c, 0x66, 0x4e, 0x85, 0x14, 0x5d, 0xce, 0xa4, 0x43, 0x59,
	0xa0, 0x61, 0x26, 0xec, 0xa9, 0x8e, 0x78, 0xbf, 0xab, 0xa1, 0x05, 0x78, 0x45, 0xf8, 0xd4, 0x25,
	0x45, 0x4f, 0xea, 0x42, 0x60, 0x8f, 0xeb, 0xf5, 0x9a, 0xec, 0x5b, 0x65, 0x99, 0x1e, 0x1d, 0xb0,
	0xd6, 0x25, 0x5a, 0x86, 0xd3, 0xc2, 0xe7, 0x82, 0xf8, 0x92, 0x92, 0xa0, 0x48, 0xb6, 0xd3, 0xe3,
	0xd9, 0xd1, 0xc5, 0xc9, 0xc2, 0xfc, 0xf0, 0x39, 0x37, 0x92, 0x48, 0xcd, 0x9e, 0xea, 0x87, 0x1f,
	0x6e, 0xe7, 0x9e, 0xc2, 0xd9, 0x21, 0xe6, 0x40, 0x70, 0x16, 0x10, 0x74, 0x1b, 0xa6, 0xa8, 0x24,
	0x95, 0x0e, 0x66, 0x67, 0xd6, 0xcc, 0xf0, 0x2c, 0x3b, 0x31, 0xd1, 0x35, 0x98, 0x72, 0x79, 0xc8,
	0x12, 0xd8, 0x94, 0x9d, 0x2c, 0x0a, 0x9f, 0x47, 0xe0, 0x4c, 0x37, 0xf8, 0x2c, 0xb9, 0x23, 0xe8,
	0x03, 0x80, 0xe3, 0x6b, 0x44, 0x57, 0xa0, 0x85, 0x4b, 0xff, 0x7f, 0x26, 0x73, 0x91, 0x95, 0x10,
	0xe5, 0xec, 0xbd, 0x95, 0x65, 0x74, 0x4f, 0x7d, 0x54, 0x4d, 0x75, 0x14, 0x35, 0xa2, 0x37, 0xea,
	0x40, 0x7d, 0x57, 0x87, 0xea, 0x20, 0xab, 0x8e, 0xa3, 0x5d, 0xd5, 0x54, 0x5f, 0xa3, 0x86, 0xfa,
	0x16, 0xd5, 0x55, 0x53, 0xed, 0x67, 0xd5, 0xb1, 0x6a, 0x66, 0xa3, 0xd7, 0xea, 0x50, 0x1d, 0x45,
	0x6f, 0xa3, 0x7a, 0xb4, 0x1b, 0x35, 0xea, 0x3f, 0x7f, 0xbf, 0x1f, 0x99, 0x41, 0x53, 0x03, 0xb7,
	0x26, 0x40, 0x0d, 0x00, 0x27, 0xd6, 0x88, 0x5c, 0xad, 0x6d, 0x6e, 0x3e, 0x7e, 0x80, 0xae, 0x77,
	0xdb, 0xcf, 0x94, 0x1e, 0xd6, 0xb9, 0xd3, 0xe7, 0x9e, 0xec, 0xad, 0x58, 0x28, 0xff, 0x7f, 0x94,
	0x2f, 0x09, 0x48, 0x67, 0x94, 0xae, 0x9f, 0x43, 0xb3, 0x83, 0xf5, 0xd6, 0xab, 0x30, 0xa4, 0x5b,
	0x3b, 0xab, 0xae, 0x6a, 0x61, 0xe3, 0xa4, 0x85, 0x8d, 0xd3, 0x16, 0x06, 0xbb, 0x31, 0x06, 0x9f,
	0x62, 0x0c, 0x7e, 0xc4, 0x18, 0xa8, 0x18, 0x83, 0x5f, 0x31, 0x06, 0x7f, 0x62, 0x6c, 0x9c, 0xc6,
	0x18, 0xbc, 0x6b, 0x63, 0x43, 0xb5, 0xb1, 0x71, 0xd2, 0xc6, 0xc6, 0xf3, 0xbc, 0x47, 0xe5, 0xcb,
	0xb0, 0x64, 0xba, 0xbc, 0x62, 0x95, 0x6a, 0xdc, 0x97, 0x35, 0x8b, 0x30, 0x49, 0x7c, 0xe1, 0xd3,
	0x80, 0xe4, 0x1d, 0x21, 0xca, 0xd4, 0xd5, 0x8f, 0xc9, 0x12, 0xa5, 0xea, 0x52, 0x69, 0x4c, 0x3f,
	0x91, 0x3b, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x6e, 0xe4, 0x79, 0xc8, 0x03, 0x00, 0x00,
}

func (this *ProductListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProductListRequest)
	if !ok {
		that2, ok := that.(ProductListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Filter.Equal(that1.Filter) {
		return false
	}
	if !this.Paginator.Equal(that1.Paginator) {
		return false
	}
	return true
}
func (this *ProductListRequestFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProductListRequestFilter)
	if !ok {
		that2, ok := that.(ProductListRequestFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NameContains != that1.NameContains {
		return false
	}
	if this.PriceGt != that1.PriceGt {
		return false
	}
	if this.PriceLt != that1.PriceLt {
		return false
	}
	if len(this.PropertiesEq) != len(that1.PropertiesEq) {
		return false
	}
	for i := range this.PropertiesEq {
		if !this.PropertiesEq[i].Equal(that1.PropertiesEq[i]) {
			return false
		}
	}
	return true
}
func (this *ProductListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProductListResponse)
	if !ok {
		that2, ok := that.(ProductListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *ProductListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pbv1.ProductListRequest{")
	if this.Filter != nil {
		s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	}
	if this.Paginator != nil {
		s = append(s, "Paginator: "+fmt.Sprintf("%#v", this.Paginator)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProductListRequestFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pbv1.ProductListRequestFilter{")
	s = append(s, "NameContains: "+fmt.Sprintf("%#v", this.NameContains)+",\n")
	s = append(s, "PriceGt: "+fmt.Sprintf("%#v", this.PriceGt)+",\n")
	s = append(s, "PriceLt: "+fmt.Sprintf("%#v", this.PriceLt)+",\n")
	if this.PropertiesEq != nil {
		s = append(s, "PropertiesEq: "+fmt.Sprintf("%#v", this.PropertiesEq)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProductListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pbv1.ProductListResponse{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProductService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ProductListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProductListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Paginator != nil {
		{
			size, err := m.Paginator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProductService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProductService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProductListRequestFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductListRequestFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProductListRequestFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PropertiesEq) > 0 {
		for iNdEx := len(m.PropertiesEq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PropertiesEq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProductService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.PriceLt != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PriceLt))))
		i--
		dAtA[i] = 0x19
	}
	if m.PriceGt != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PriceGt))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.NameContains) > 0 {
		i -= len(m.NameContains)
		copy(dAtA[i:], m.NameContains)
		i = encodeVarintProductService(dAtA, i, uint64(len(m.NameContains)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProductListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProductListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintProductService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProductService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintProductService(dAtA []byte, offset int, v uint64) int {
	offset -= sovProductService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProductListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovProductService(uint64(l))
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovProductService(uint64(l))
	}
	return n
}

func (m *ProductListRequestFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NameContains)
	if l > 0 {
		n += 1 + l + sovProductService(uint64(l))
	}
	if m.PriceGt != 0 {
		n += 9
	}
	if m.PriceLt != 0 {
		n += 9
	}
	if len(m.PropertiesEq) > 0 {
		for _, e := range m.PropertiesEq {
			l = e.Size()
			n += 1 + l + sovProductService(uint64(l))
		}
	}
	return n
}

func (m *ProductListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovProductService(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovProductService(uint64(m.Count))
	}
	return n
}

func sovProductService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProductService(x uint64) (n int) {
	return sovProductService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProductListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProductListRequest{`,
		`Filter:` + strings.Replace(this.Filter.String(), "ProductListRequestFilter", "ProductListRequestFilter", 1) + `,`,
		`Paginator:` + strings.Replace(fmt.Sprintf("%v", this.Paginator), "Paginator", "Paginator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProductListRequestFilter) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPropertiesEq := "[]*ProductProperty{"
	for _, f := range this.PropertiesEq {
		repeatedStringForPropertiesEq += strings.Replace(fmt.Sprintf("%v", f), "ProductProperty", "ProductProperty", 1) + ","
	}
	repeatedStringForPropertiesEq += "}"
	s := strings.Join([]string{`&ProductListRequestFilter{`,
		`NameContains:` + fmt.Sprintf("%v", this.NameContains) + `,`,
		`PriceGt:` + fmt.Sprintf("%v", this.PriceGt) + `,`,
		`PriceLt:` + fmt.Sprintf("%v", this.PriceLt) + `,`,
		`PropertiesEq:` + repeatedStringForPropertiesEq + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProductListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*Product{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(fmt.Sprintf("%v", f), "Product", "Product", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ProductListResponse{`,
		`Items:` + repeatedStringForItems + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProductService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProductListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProductService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProductService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &ProductListRequestFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProductService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProductService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &Paginator{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProductService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProductService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductListRequestFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductListRequestFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductListRequestFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProductService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProductService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceGt", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PriceGt = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceLt", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PriceLt = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropertiesEq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProductService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProductService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropertiesEq = append(m.PropertiesEq, &ProductProperty{})
			if err := m.PropertiesEq[len(m.PropertiesEq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProductService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProductService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProductService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProductService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProductService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Product{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProductService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProductService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProductService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProductService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProductService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProductService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProductService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProductService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProductService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProductService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProductService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProductService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProductService = fmt.Errorf("proto: unexpected end of group")
)
